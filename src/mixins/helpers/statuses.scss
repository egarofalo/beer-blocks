@use "sass:map";
@use "sass:list";

// Import other helpers
@import "./border";
// Plugin custom variables and functions
@import "./../../variables";
@import "./../../functions";

// Get statuses rules
@mixin statusesRules(
	$blockName,
	$attrPrefix: "",
	$hoverColor: false,
	$hoverColorDefault: map.get($defaultColors, color),
	$activeColor: false,
	$activeColorDefault: map.get($defaultColors, color),
	$focusColor: false,
	$focusColorDefault: map.get($defaultColors, color),
	$hoverBackground: false,
	$hoverBackgroundDefault: map.get($defaultColors, background),
	$activeBackground: false,
	$activeBackgroundDefault: map.get($defaultColors, background),
	$focusBackground: false,
	$focusBackgroundDefault: map.get($defaultColors, background),
	$hoverBorder: false,
	$hoverBorderDefault: $defaultStatusesHelperBorder,
	$activeBorder: false,
	$activeBorderDefault: $defaultStatusesHelperBorder,
	$focusBorder: false,
	$focusBorderDefault: $defaultStatusesHelperBorder,
	$transition: false,
	$defaultTransitionDelay: "0s",
	$defaultTransitionDuration: "0s",
	$defaultTransitionTimingFunction: "ease"
) {
	// hover status
	@if $hoverColor or $hoverBackground or $hoverBorder {
		&.wp-beer-blocks-hover-statuses-helper {
			&:hover {
				@if $hoverColor {
					color: var(
						--wp-beer-blocks-#{$blockName}-#{camelize(
								#{$attrPrefix}-hover-color
							)},
						$hoverColorDefault
					);
				}

				@if $hoverBackground {
					background: var(
						--wp-beer-blocks-#{$blockName}-#{camelize(
								#{$attrPrefix}-hover-background
							)},
						$hoverBackgroundDefault
					);
				}

				@if $hoverBorder {
					@include borderRules(
						$blockName,
						$attrPrefix: "#{$attrPrefix}-hover",
						$borderDefaults: $hoverBorderDefault
					);
				}
			}
		}
	}

	// active status
	@if $activeColor or $activeBackground or $activeBorder {
		&.wp-beer-blocks-active-statuses-helper {
			&:active {
				@if $activeColor {
					color: var(
						--wp-beer-blocks-#{$blockName}-#{camelize(
								#{$attrPrefix}-active-color
							)},
						$activeColorDefault
					);
				}

				@if $activeBackground {
					background: var(
						--wp-beer-blocks-#{$blockName}-#{camelize(
								#{$attrPrefix}-active-background
							)},
						$activeBackgroundDefault
					);
				}

				@if $activeBorder {
					@include borderRules(
						$blockName,
						$attrPrefix: "#{$attrPrefix}-active",
						$borderDefaults: $activeBorderDefault
					);
				}
			}
		}
	}

	// focus status
	@if $focusColor or $focusBackground or $focusBorder {
		&.wp-beer-blocks-focus-statuses-helper {
			&:focus {
				@if $focusColor {
					color: var(
						--wp-beer-blocks-#{$blockName}-#{camelize(
								#{$attrPrefix}-focus-color
							)},
						$focusColorDefault
					);
				}

				@if $focusBackground {
					background: var(
						--wp-beer-blocks-#{$blockName}-#{camelize(
								#{$attrPrefix}-focus-background
							)},
						$focusBackgroundDefault
					);
				}

				@if $focusBorder {
					@include borderRules(
						$blockName,
						$attrPrefix: "#{$attrPrefix}-focus",
						$borderDefaults: $focusBorderDefault
					);
				}
			}
		}
	}

	// transition rules
	@if $transition {
		&.wp-beer-blocks-transition-statuses-helper {
			$transitionProperty: ();

			@if $hoverColor or $activeColor or $focusColor {
				$transitionProperty: list.append($transitionProperty, color);
			}

			@if $hoverBackground or $activeBackground or $focusBackground {
				$transitionProperty: list.append($transitionProperty, background);
			}

			@if $hoverBorder or $activeBorder or $focusBorder {
				$transitionProperty: list.append($transitionProperty, border-color);
				$transitionProperty: list.append($transitionProperty, border-width);
			}

			transition-property: implode($transitionProperty, ", ");
			transition-delay: var(
				--wp-beer-blocks-#{$blockName}-#{camelize(
						#{$attrPrefix}-transition-delay
					)},
				$defaultTransitionDelay
			);
			transition-duration: var(
				--wp-beer-blocks-#{$blockName}-#{camelize(
						#{$attrPrefix}-transition-duration
					)},
				$defaultTransitionDuration
			);
			transition-timing-function: var(
				--wp-beer-blocks-#{$blockName}-#{camelize(
						#{$attrPrefix}-transition-timing-function
					)},
				$defaultTransitionTimingFunction
			);
		}
	}
}
